AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 
    Sample SAM Template for food delivery app

Globals:
    Function:
        Timeout: 20

Resources:

    FoodDeliveryFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: .target/SearchRestaurant-1.0-SNAPSHOT-shaded.jar
            Handler: org.example.Main::handleRequest
            Runtime: java11

            ApiGatewayRestApi:
              Type: AWS::ApiGateway::RestApi
              Properties:
                ApiKeySourceType: HEADER
                Description: An API Gateway with a Lambda Integration
                EndpointConfiguration:
                  Types:
                    - REGIONAL
                Name: lambda-api

            ApiGatewayResource:
              Type: AWS::ApiGateway::Resource
              Properties:
                ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
                PathPart: 'buyFood'
                RestApiId: !Ref ApiGatewayRestApi

            ApiGatewayMethod:
              Type: AWS::ApiGateway::Method
              Properties:
                ApiKeyRequired: false
                AuthorizationType: NONE
                HttpMethod: GET
                Integration:
                  ConnectionType: INTERNET
                  Credentials: !GetAtt ApiGatewayIamRole.Arn
                  IntegrationHttpMethod: POST
                  PassthroughBehavior: WHEN_NO_MATCH
                  TimeoutInMillis: 29000
                  Type: AWS_PROXY
                  Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
                OperationName: 'buyFood'
                ResourceId: !Ref ApiGatewayResource
                RestApiId: !Ref ApiGatewayRestApi

            ApiGatewayModel:
              Type: AWS::ApiGateway::Model
              Properties:
                ContentType: 'application/json'
                RestApiId: !Ref ApiGatewayRestApi
                Schema: {}

            ApiGatewayStage:
              Type: AWS::ApiGateway::Stage
              Properties:
                DeploymentId: !Ref ApiGatewayDeployment
                Description: Lambda API Stage v0
                RestApiId: !Ref ApiGatewayRestApi
                StageName: 'testdummy'

            ApiGatewayDeployment:
              Type: AWS::ApiGateway::Deployment
              DependsOn: ApiGatewayMethod
              Properties:
                Description: Lambda API Deployment
                RestApiId: !Ref ApiGatewayRestApi

            ApiGatewayIamRole:
              Type: AWS::IAM::Role
              Properties:
                AssumeRolePolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Sid: ''
                      Effect: 'Allow'
                      Principal:
                        Service:
                          - 'apigateway.amazonaws.com'
                      Action:
                        - 'sts:AssumeRole'
                Path: '/'
                Policies:
                  - PolicyName: LambdaAccess
                    PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                        - Effect: 'Allow'
                          Action: 'lambda:*'
                          Resource: !GetAtt LambdaFunction.Arn

            LambdaFunction:
              Type: AWS::Lambda::Function
              Properties:
                Code:
                  S3Bucket: 'tests3bucketforlamda'
                  S3Key: 'SearchRestaurant-1.0-SNAPSHOT.jar'
                Description: AWS Lambda function to Buy Foods in PickMeFoodDelivery
                FunctionName: 'buyFood'
                Handler: org.example.Main::buyFood
                MemorySize: 256
                Role: !GetAtt LambdaIamRole.Arn
                Runtime: java11
                Timeout: 60

            lambdaApiGatewayInvoke:
              Type: AWS::Lambda::Permission
              Properties:
                FunctionName: !GetAtt LambdaFunction.Arn
                FunctionUrlAuthType: 'NONE'
                Action: lambda:InvokeFunctionUrl
                Principal: '*'

            LambdaIamRole:
              Type: AWS::IAM::Role
              Properties:
                AssumeRolePolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: 'Allow'
                      Principal:
                        Service:
                          - 'lambda.amazonaws.com'
                      Action:
                        - 'sts:AssumeRole'
                Path: '/'
